[{"/Users/benstones/ReactCalculator/src/index.js":"1","/Users/benstones/ReactCalculator/src/App.js":"2","/Users/benstones/ReactCalculator/src/reportWebVitals.js":"3","/Users/benstones/ReactCalculator/src/Display.js":"4","/Users/benstones/ReactCalculator/src/ButtonContainer.js":"5","/Users/benstones/ReactCalculator/src/Button.js":"6"},{"size":535,"mtime":1652207091644,"results":"7","hashOfConfig":"8"},{"size":1207,"mtime":1654545981991,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1652207091644,"results":"10","hashOfConfig":"8"},{"size":172,"mtime":1652211924907,"results":"11","hashOfConfig":"8"},{"size":1763,"mtime":1654544327854,"results":"12","hashOfConfig":"8"},{"size":311,"mtime":1652732843832,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l6vk0n",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/benstones/ReactCalculator/src/index.js",[],[],"/Users/benstones/ReactCalculator/src/App.js",["34","35"],[],"import Display from './Display';\nimport ButtonContainer from './ButtonContainer';\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const evil = (fn) => {\n    return new Function('return ' + fn)();\n  }\n\n  const [total, setTotal] = useState('0');\n  const [expression, setExpression] = useState('0');\n\n\n  const calculate = (expression) => {\n    var stringMath = require('string-math');\n    return stringMath(expression);\n  }\n  \n  /*\ncalculator.net\n*/\n  const handleClick = (buttonName, buttonType) => {\n      if (buttonName === '=') {\n        setExpression(expression.concat(buttonName));\n        setTotal(calculate(expression));\n      } else if (buttonName === 'C') {\n        setTotal('0')\n        setExpression('0')\n      } else if (buttonType === 'num' || buttonType === 'op') {\n        if (expression.endsWith('=') || expression === '0') {\n            setExpression(buttonName);\n        } else {\n            setExpression(expression.concat(buttonName));\n        } \n    }\n  }\n\n  return (\n    <div className='calc-container'>\n      <Display text={expression}/>\n      <Display text={total}/>\n      <ButtonContainer clickHandler={handleClick}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/benstones/ReactCalculator/src/reportWebVitals.js",[],[],"/Users/benstones/ReactCalculator/src/Display.js",[],[],"/Users/benstones/ReactCalculator/src/ButtonContainer.js",[],[],[],"/Users/benstones/ReactCalculator/src/Button.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":8,"column":9,"nodeType":"38","messageId":"39","endLine":8,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":9,"column":12,"nodeType":"42","messageId":"43","endLine":9,"endColumn":40},"no-unused-vars","'evil' is assigned a value but never used.","Identifier","unusedVar","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor"]