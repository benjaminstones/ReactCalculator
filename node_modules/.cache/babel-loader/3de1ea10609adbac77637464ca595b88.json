{"ast":null,"code":"var _jsxFileName = \"/Users/benstones/Desktop/ReactApps/calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Display from './Display';\nimport ButtonContainer from './ButtonContainer';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const evil = fn => {\n    return new Function('return ' + fn)();\n  };\n\n  const [answer, setAnswer] = useState('0');\n  const [firstInt, setFirstInt] = useState('0');\n  const [secondInt, setSecondInt] = useState('');\n  const [expression, setExpression] = useState('0'); // const [operator, setOperator] = useState('');\n\n  useEffect(() => {\n    //ToDo - set expression to be firstint, operator, secondint\n    setExpression(firstInt.concat(operator, secondInt)); // console.log(firstInt, secondInt, operator)\n  }, [firstInt, secondInt, operator]); // const equate = (firstInt, secondInt, operator) => {\n  //   switch(operator) {\n  //     case '+':\n  //       return firstInt + secondInt;\n  //     case '-':\n  //       return firstInt - secondInt;\n  //     case '*':\n  //       return firstInt * secondInt;\n  //     case '/':\n  //       return firstInt / secondInt;\n  //   }\n  // }\n\n  /*\n  calculator.net\n  \n  expression:\n  whenever we add a number or operator we append to it\n  when we press equals, this becomes the total\n  Displayed at TOP\n  \n  total:\n  Displayed at bottom\n  This becomes calculated \n  \n  \n  */\n\n  const handleClick = (buttonName, buttonType) => {\n    /*\n    if it isnt a\n     */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc-container\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      text: firstInt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: expression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      clickHandler: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"MMsncpMIhVVHhzr1d3t3z+B67lA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Display","ButtonContainer","useState","useEffect","App","evil","fn","Function","answer","setAnswer","firstInt","setFirstInt","secondInt","setSecondInt","expression","setExpression","concat","operator","handleClick","buttonName","buttonType"],"sources":["/Users/benstones/Desktop/ReactApps/calculator/src/App.js"],"sourcesContent":["import Display from './Display';\nimport ButtonContainer from './ButtonContainer';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const evil = (fn) => {\n    return new Function('return ' + fn)();\n  }\n\n  const [answer, setAnswer] = useState('0');\n  const [firstInt, setFirstInt] = useState('0');\n  const [secondInt, setSecondInt] = useState('');\n  const [expression, setExpression] = useState('0');\n  // const [operator, setOperator] = useState('');\n\n  useEffect(() => {\n    //ToDo - set expression to be firstint, operator, secondint\n    setExpression(firstInt.concat(operator, secondInt))\n    // console.log(firstInt, secondInt, operator)\n  }, [firstInt, secondInt, operator]);\n\n  // const equate = (firstInt, secondInt, operator) => {\n  //   switch(operator) {\n  //     case '+':\n  //       return firstInt + secondInt;\n  //     case '-':\n  //       return firstInt - secondInt;\n  //     case '*':\n  //       return firstInt * secondInt;\n  //     case '/':\n  //       return firstInt / secondInt;\n        \n  //   }\n  // }\n/*\ncalculator.net\n\nexpression:\nwhenever we add a number or operator we append to it\nwhen we press equals, this becomes the total\nDisplayed at TOP\n\ntotal:\nDisplayed at bottom\nThis becomes calculated \n\n\n*/\n  const handleClick = (buttonName, buttonType) => {\n\n    /*\n    if it isnt a\n\n    */\n    \n  };\n\n  return (\n    <div className='calc-container'>\n      <Display text={firstInt}/>\n      <Display text={expression}/>\n      <ButtonContainer clickHandler={handleClick}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAMC,IAAI,GAAIC,EAAD,IAAQ;IACnB,OAAO,IAAIC,QAAJ,CAAa,YAAYD,EAAzB,GAAP;EACD,CAFD;;EAIA,MAAM,CAACE,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,GAAD,CAApC;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,GAAD,CAAxC;EACA,MAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,GAAD,CAA5C,CATa,CAUb;;EAEAC,SAAS,CAAC,MAAM;IACd;IACAY,aAAa,CAACL,QAAQ,CAACM,MAAT,CAAgBC,QAAhB,EAA0BL,SAA1B,CAAD,CAAb,CAFc,CAGd;EACD,CAJQ,EAIN,CAACF,QAAD,EAAWE,SAAX,EAAsBK,QAAtB,CAJM,CAAT,CAZa,CAkBb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;;EACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,UAAb,KAA4B;IAE9C;AACJ;AACA;EAGG,CAPD;;EASA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE,QAAC,OAAD;MAAS,IAAI,EAAEV;IAAf;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,OAAD;MAAS,IAAI,EAAEI;IAAf;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,eAAD;MAAiB,YAAY,EAAEI;IAA/B;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GA7DQd,G;;KAAAA,G;AA+DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}