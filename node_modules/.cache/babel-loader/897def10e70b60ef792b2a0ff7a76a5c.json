{"ast":null,"code":"var _jsxFileName = \"/Users/benstones/ReactCalculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Display from './Display';\nimport ButtonContainer from './ButtonContainer';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const evil = fn => {\n    return new Function('return ' + fn)();\n  };\n\n  const [total, setTotal] = useState('0');\n  const [expression, setExpression] = useState('0');\n\n  const calculate = expression => {\n    var stringMath = require('string-math');\n\n    return stringMath(expression);\n  };\n  /*\n  calculator.net\n  expression:\n  whenever we add a number or operator we append to it\n  when we press equals, this becomes the total\n  Displayed at TOP\n  total:\n  Displayed at bottom\n  This becomes calculated \n  */\n\n\n  const handleClick = (buttonName, buttonType) => {\n    console.log(buttonName);\n    /*\n    if number or operator\n      append to expression\n    */\n\n    if (expression.endsWith) if (buttonType === 'num' || buttonType === 'op') {\n      if (expression === '0') {\n        setExpression(buttonName);\n      } else {\n        setExpression(expression.concat(buttonName));\n      } //setTotal(calculate(expression));\n\n    } else if (buttonName === '=') {\n      setExpression(expression.concat(buttonName));\n      setTotal(calculate(expression));\n    } else if (buttonName === 'C') {\n      setTotal('0');\n      setExpression('0');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc-container\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      text: expression\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      clickHandler: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qEGEjGgpcrfvfEDF+0KvoseQ9GM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Display","ButtonContainer","useState","useEffect","App","evil","fn","Function","total","setTotal","expression","setExpression","calculate","stringMath","require","handleClick","buttonName","buttonType","console","log","endsWith","concat"],"sources":["/Users/benstones/ReactCalculator/src/App.js"],"sourcesContent":["import Display from './Display';\nimport ButtonContainer from './ButtonContainer';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const evil = (fn) => {\n    return new Function('return ' + fn)();\n  }\n\n  const [total, setTotal] = useState('0');\n  const [expression, setExpression] = useState('0');\n\n\n  const calculate = (expression) => {\n    var stringMath = require('string-math');\n    return stringMath(expression);\n  }\n  \n  /*\ncalculator.net\n\nexpression:\nwhenever we add a number or operator we append to it\nwhen we press equals, this becomes the total\nDisplayed at TOP\n\ntotal:\nDisplayed at bottom\nThis becomes calculated \n\n\n*/\n  const handleClick = (buttonName, buttonType) => {\n    console.log(buttonName);\n    /*\n    if number or operator\n      append to expression\n    */\n   if (expression.endsWith)\n    if (buttonType === 'num' || buttonType === 'op') {\n      if (expression === '0') {\n        setExpression(buttonName);\n      } else {\n        setExpression(expression.concat(buttonName));\n      }\n      //setTotal(calculate(expression));\n    } else if (buttonName === '=') {\n      setExpression(expression.concat(buttonName));\n      setTotal(calculate(expression));\n    } else if (buttonName === 'C') {\n      setTotal('0')\n      setExpression('0')\n    }\n    \n  };\n\n  return (\n    <div className='calc-container'>\n      <Display text={expression}/>\n      <Display text={total}/>\n      <ButtonContainer clickHandler={handleClick}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAMC,IAAI,GAAIC,EAAD,IAAQ;IACnB,OAAO,IAAIC,QAAJ,CAAa,YAAYD,EAAzB,GAAP;EACD,CAFD;;EAIA,MAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,GAAD,CAAlC;EACA,MAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,GAAD,CAA5C;;EAGA,MAAMU,SAAS,GAAIF,UAAD,IAAgB;IAChC,IAAIG,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;IACA,OAAOD,UAAU,CAACH,UAAD,CAAjB;EACD,CAHD;EAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAKE,MAAMK,WAAW,GAAG,CAACC,UAAD,EAAaC,UAAb,KAA4B;IAC9CC,OAAO,CAACC,GAAR,CAAYH,UAAZ;IACA;AACJ;AACA;AACA;;IACG,IAAIN,UAAU,CAACU,QAAf,EACC,IAAIH,UAAU,KAAK,KAAf,IAAwBA,UAAU,KAAK,IAA3C,EAAiD;MAC/C,IAAIP,UAAU,KAAK,GAAnB,EAAwB;QACtBC,aAAa,CAACK,UAAD,CAAb;MACD,CAFD,MAEO;QACLL,aAAa,CAACD,UAAU,CAACW,MAAX,CAAkBL,UAAlB,CAAD,CAAb;MACD,CAL8C,CAM/C;;IACD,CAPD,MAOO,IAAIA,UAAU,KAAK,GAAnB,EAAwB;MAC7BL,aAAa,CAACD,UAAU,CAACW,MAAX,CAAkBL,UAAlB,CAAD,CAAb;MACAP,QAAQ,CAACG,SAAS,CAACF,UAAD,CAAV,CAAR;IACD,CAHM,MAGA,IAAIM,UAAU,KAAK,GAAnB,EAAwB;MAC7BP,QAAQ,CAAC,GAAD,CAAR;MACAE,aAAa,CAAC,GAAD,CAAb;IACD;EAEF,CAtBD;;EAwBA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE,QAAC,OAAD;MAAS,IAAI,EAAED;IAAf;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,OAAD;MAAS,IAAI,EAAEF;IAAf;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,eAAD;MAAiB,YAAY,EAAEO;IAA/B;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GA5DQX,G;;KAAAA,G;AA8DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}